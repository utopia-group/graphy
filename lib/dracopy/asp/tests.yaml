Definitions:
    # test data
    data: {filename: asp/examples/data.lp}

    define: {filename: asp/define.lp}
    generate: {filename: asp/generate.lp}
    hard: {filename: asp/hard.lp}
    hard-integrity: {filename: asp/hard-integrity.lp}
    features: {filename: asp/soft.lp}
    optimize: {filename: asp/optimize.lp}

    # program to test constraints
    no_opt: {group: [data, define, generate, hard, hard-integrity, features]}
    no_gen: {group: [data, define, hard, hard-integrity, features]}
    draco: {group: [data, define, generate, hard, hard-integrity, features, optimize]}

Test a implies b:
    Program: |
        b :- a.
        a.
        :- not b.
    Expect: SAT

Test program by itself is satisfiable:
    Modules: no_opt
    Expect: SAT

Test valid values:
    Modules: no_opt
    Expect: SAT

    Test channel:
        Program: |
            :- not channel(_,x).

    Test field:
        Program: |
            :- not field(_,n1).

    Test type:
        Program: |
            :- not type(_,quantitative).

    Test aggregate:
        Program: |
            :- not aggregate(_,mean).

    Test bin:
        Program: |
            :- not bin(_,10).

    Test zero:
        Program: |
            :- not zero(_).

    Test fieldtype:
        Program: |
            :- not fieldtype(_,string).

    Test mark:
        Program: |
            :- not mark(bar).

    Test data size:
        Program: |
            num_rows(10).

Test invalid values:
    Modules: no_opt
    Expect: UNSAT

    Test channel:
        Program: |
            :- not channel(_,foo).

    Test field:
        Program: |
            :- not field(_,foo).

    Test type:
        Program: |
            :- not type(_,foo).

    Test aggregate:
        Program: |
            :- not aggregate(_,foo).

    Test bin:
        Program: |
            :- not bin(_,-1).

    Test fieldtype:
        Program: |
            :- not fieldtype(_,foo).

    Test mark:
        Program: |
            :- not mark(foo).

    Test data size:
        Program: |
            num_rows(-10).

Test constraints:
    Modules: no_opt

    Test can use binning:
        Program: |
            encoding(e).
            :- not bin(e,_).
        Expect: SAT

    Test can use aggregation:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
        Expect: SAT

    Test cannot use aggregation and binning:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
            :- not bin(e,_).
        Expect: UNSAT

    Test cannot use field with count:
        Program: |
            encoding(e).
            :- not aggregate(e,count).
            :- not field(e,q1).
        Expect: UNSAT

    Test can use string as o:
        Program: |
            encoding(e).
            :- not field(e,n1).
            :- not type(e,ordinal).
        Expect: SAT

    Test cannot use string as q:
        Program: |
            encoding(e).
            :- not field(e,n1).
            :- not type(e,quantitative).
        Expect: UNSAT

    Test cannot bin temporal:
        Program: |
            fieldtype(d,datetime).
            encoding(e).
            :- not field(e,d).
            :- not type(e,temporal).
            :- not bin(e,_).
        Expect: UNSAT

    Test cannot use log with string:
        Program: |
            encoding(e).
            :- not field(e,n1).
            :- not log(e).
        Expect: UNSAT

    Test can log number:
        Program: |
            encoding(e).
            :- not field(e,q2).
            :- not log(e).
        Expect: SAT

    Test cannot use log with binned data because it is discrete:
        Program: |
            encoding(e).
            :- not log(e).
            :- not bin(e).
        Expect: UNSAT

    Test cannot use zero with string:
        Program: |
            encoding(e).
            :- not field(e,n1).
            :- not zero(e).
        Expect: UNSAT

    Test can zero number:
        Program: |
            encoding(e).
            :- not field(e,q1).
            :- not zero(e).
        Expect: SAT

    Test cannot use zero with binned data because it is discrete:
        Program: |
            encoding(e).
            :- not zero(e).
            :- not bin(e).
        Expect: UNSAT

    Test can compute average of a number:
        Program: |
            encoding(e).
            :- not field(e,q1).
            :- not aggregate(e,mean).
        Expect: SAT

    Test cannot compute average of a string:
        Program: |
            encoding(e).
            :- not field(e,n1).
            :- not aggregate(e,mean).
        Expect: UNSAT

    Test cannot aggregate nominal:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
            :- not type(e,nominal).
        Expect: UNSAT

    Test can aggregate continuous:
        Program: |
            encoding(e).
            :- not aggregate(e,_).
        Expect: SAT

    Test temporal requires datetime:
        Program: |
            fieldtype(t,datetime).
            encoding(e).
            :- not field(e,t).
            :- not type(e,temporal).
        Expect: SAT

    Test cannot use different different on x and y:
        Program: |
            encoding(e0).
            :- not channel(e0,x).
            :- not field(e0,n1).
            encoding(e1).
            :- not channel(e1,y).
            :- not field(e1,n2).
        Expect: SAT

    Test cannot use same field on x and y:
        Program: |
            encoding(e0).
            :- not channel(e0,x).
            :- not field(e0,n1).
            encoding(e1).
            :- not channel(e1,y).
            :- not field(e1,n1).
        Expect: UNSAT

Test helpers:
    Modules: no_gen

    Test overlap:
        Program: |
            mark(point).

            encoding(e1).
            field(e1,n1).
            channel(e1,x).
            type(e1,ordinal).

            encoding(e2).
            field(e2,q1).
            channel(e2,y).
            type(e2,quantitative).

            :- no_overlap.
        Expect: SAT

    Test no overlap aggregation:
        Program: |
            mark(point).

            encoding(e1).
            field(e1,n1).
            channel(e1,x).
            type(e1,ordinal).

            encoding(e2).
            field(e2,q1).
            channel(e2,y).
            type(e2,quantitative).
            aggregate(e2,mean).

            :- no_overlap.
        Expect: UNSAT

    Test no overlap cardinality:
        Program: |
            mark(point).

            encoding(e1).
            field(e1,q2).
            channel(e1,x).
            type(e1,ordinal).

            encoding(e2).
            field(e2,q1).
            channel(e2,y).
            type(e2,quantitative).

            :- no_overlap.
        Expect: UNSAT

Test soft constraints:
    Modules: no_gen

    Test high entropy data:
        Program: |
            fieldtype(n3,number).
            cardinality(n3,200).
            entropy(n3,1).

            mark(point).

            encoding(e).
            field(e,n3).
            channel(e,x).
            type(e,quantitative).

            :- not soft(position_entropy, e).
        Expect: SAT

    Test skew with zero:
        Program: |
            fieldtype(n3,number).
            cardinality(n3,10).
            extent(n3,10,12).

            mark(tick).

            encoding(e).
            field(e,n3).
            channel(e,x).
            type(e,quantitative).
            zero(e).

            :- not soft(zero_skew).
        Expect: SAT

    Test zero with data that covers it:
        Program: |
            fieldtype(n3,number).
            cardinality(n3,200).
            entropy(n3,1).
            extent(n3,-10,10).

            mark(point).

            encoding(e).
            field(e,n3).
            channel(e,x).
            type(e,quantitative).
            zero(e).

            :- not soft(includes_zero).

        Expect: UNSAT
